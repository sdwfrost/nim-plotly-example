/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI69214 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI68017 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI65620 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI65404 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI65402 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI65614 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI65611 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI65608 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI65605 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI65602 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI69202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI69223 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI69227 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13609 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3426 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3482 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3482 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3482.node = NNI3482;
var NNI3426 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3426.node = NNI3426;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3426.base = NTI3424;
NTI3482.base = NTI3426;
var NNI13609 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13609.node = NNI13609;
var NNI69227 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI69227.node = NNI69227;
var NNI69202 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI69202, name: "lvlAll", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI69202, name: "lvlDebug", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI69202, name: "lvlInfo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI69202, name: "lvlNotice", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI69202, name: "lvlWarn", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI69202, name: "lvlError", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI69202, name: "lvlFatal", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI69202, name: "lvlNone", len: 0, sons: null}}};
NTI69202.node = NNI69202;
var NNI69223 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "levelThreshold", len: 0, typ: NTI69202, name: "levelThreshold", sons: null}, 
{kind: 1, offset: "fmtStr", len: 0, typ: NTI138, name: "fmtStr", sons: null}]};
NTI69223.node = NNI69223;
NTI69223.base = NTI3408;
NTI69227.base = NTI69223;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI3458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3458.node = NNI3458;
NTI3458.base = NTI3424;
NTI65605.base = NTI104;
NTI65608.base = NTI104;
NTI65611.base = NTI104;
NTI65614.base = NTI104;
var NNI65402 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"0": {kind: 1, offset: 0, typ: NTI65402, name: "mJan", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI65402, name: "mFeb", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI65402, name: "mMar", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI65402, name: "mApr", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI65402, name: "mMay", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI65402, name: "mJun", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI65402, name: "mJul", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI65402, name: "mAug", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI65402, name: "mSep", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI65402, name: "mOct", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI65402, name: "mNov", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI65402, name: "mDec", len: 0, sons: null}}};
NTI65402.node = NNI65402;
var NNI65404 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI65404, name: "dMon", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI65404, name: "dTue", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI65404, name: "dWed", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI65404, name: "dThu", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI65404, name: "dFri", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI65404, name: "dSat", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI65404, name: "dSun", len: 0, sons: null}}};
NTI65404.node = NNI65404;
NTI65620.base = NTI104;
var NNI65602 = {kind: 2, len: 10, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "second", len: 0, typ: NTI65605, name: "second", sons: null}, 
{kind: 1, offset: "minute", len: 0, typ: NTI65608, name: "minute", sons: null}, 
{kind: 1, offset: "hour", len: 0, typ: NTI65611, name: "hour", sons: null}, 
{kind: 1, offset: "monthday", len: 0, typ: NTI65614, name: "monthday", sons: null}, 
{kind: 1, offset: "month", len: 0, typ: NTI65402, name: "month", sons: null}, 
{kind: 1, offset: "year", len: 0, typ: NTI104, name: "year", sons: null}, 
{kind: 1, offset: "weekday", len: 0, typ: NTI65404, name: "weekday", sons: null}, 
{kind: 1, offset: "yearday", len: 0, typ: NTI65620, name: "yearday", sons: null}, 
{kind: 1, offset: "isDST", len: 0, typ: NTI130, name: "isDST", sons: null}, 
{kind: 1, offset: "timezone", len: 0, typ: NTI104, name: "timezone", sons: null}]};
NTI65602.node = NNI65602;
NTI65602.base = NTI3408;
NTI68017.base = NTI65404;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
NTI69214.base = NTI138;

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20264, value_20265, typ_20266) {
		      var result = new Array(len_20264);
      for (var i = 0; i < len_20264; ++i) result[i] = nimCopy(null, value_20265, typ_20266);
      return result;
    

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		e_14006.trace = nimCopy(null, rawWriteStackTrace_13828(), NTI138);
		throw e_14006;

	
}

function isObj(obj_20468, subclass_20469) {
	var result_20470 = false;

	BeforeRet: do {
		var x_20471 = obj_20468;
		if ((x_20471 == subclass_20469)) {
		result_20470 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_20471 == subclass_20469))) break L2;
					if ((x_20471 == null)) {
					result_20470 = false;
					break BeforeRet;
					}
					
					x_20471 = x_20471.base;
				}
		} while(false);
		result_20470 = true;
		break BeforeRet;
	} while (false);

	return result_20470;

}

function chckIndx(i_20403, a_20404, b_20405) {
			var Tmp1;

	var result_20406 = 0;

	BeforeRet: do {
			if (!(a_20404 <= i_20403)) Tmp1 = false; else {				Tmp1 = (i_20403 <= b_20405);			}		if (Tmp1) {
		result_20406 = i_20403;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20406;

}

function addInt(a_17403, b_17404) {
		      var result = a_17403 + b_17404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mnewString(len_15203) {
		      var result = new Array(len_15203+1);
      result[0] = 0;
      result[len_15203] = 0;
      return result;
    

	
}

function chckRange(i_20409, a_20410, b_20411) {
			var Tmp1;

	var result_20412 = 0;

	BeforeRet: do {
			if (!(a_20410 <= i_20409)) Tmp1 = false; else {				Tmp1 = (i_20409 <= b_20411);			}		if (Tmp1) {
		result_20412 = i_20409;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20412;

}

function addChar(x_20506, c_20507) {
		    x_20506[x_20506.length-1] = c_20507; x_20506.push(0);
  

	
}
var ConstSet2 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet3 = setConstr([65, 90]);
		var weekDays_68014 = nimCopy(null, [6, 0, 1, 2, 3, 4, 5], NTI68017);

function mulInt(a_17803, b_17804) {
		      var result = a_17803 * b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function subInt(a_17603, b_17604) {
		      var result = a_17603 - b_17604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function modInt(a_18203, b_18204) {
		      if (b_18204 == 0) raiseDivByZero();
      if (b_18204 == -1 && a_18203 == 2147483647) raiseOverflow();
      return Math.floor(a_18203 % b_18204);
    

	
}
							var LevelNames_69211 = nimCopy(null, [makeNimstrLit("DEBUG"), makeNimstrLit("DEBUG"), makeNimstrLit("INFO"), makeNimstrLit("NOTICE"), makeNimstrLit("WARN"), makeNimstrLit("ERROR"), makeNimstrLit("FATAL"), makeNimstrLit("NONE")], NTI69214);
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var objectID_49232 = [0];

function getTime_65642() {
	var result_68013 = 0.0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1333;
		result_68013 = new Date();
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_68013;

}
var startMilsecs_68112 = [getTime_65642()];
var level_69407 = [0];
var handlers_69409 = [null];
var Plotly_72009 = function(){return (Plotly)}();
var trace1_73001 = [{}];
trace1_73001[0].x = [1, 2, 3, 4];
trace1_73001[0].y = [18, 15, 13, 12];
trace1_73001[0].mode = makeNimstrLit("lines+markers");
var data1_73097 = [[trace1_73001[0]]];
var layout1_73098 = [{}];
layout1_73098[0].title = "Line plot";
Plotly_72009.newPlot("line-plot", data1_73097[0], layout1_73098[0]);
var trace2_73118 = [{}];
trace2_73118[0].x = ["giraffes", "orangutans", "monkeys"];
trace2_73118[0].y = [20, 14, 23];
trace2_73118[0].type = "bar";
var data2_73212 = [[trace2_73118[0]]];
var layout2_73213 = [{}];
layout2_73213[0].title = "Bar plot";
Plotly_72009.newPlot("bar-plot", data2_73212[0], layout2_73213[0]);

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function auxWriteStackTrace_13604(f_13606) {
					var Tmp3;

	var result_13607 = [null];

		var it_13615 = f_13606;
		var i_13616 = 0;
		var total_13617 = 0;
		var tempFrames_13621 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13609);
		L1: do {
				L2: while (true) {
					if (!!((it_13615 == null))) Tmp3 = false; else {						Tmp3 = (i_13616 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_13621[i_13616].Field0 = it_13615.procname;
					tempFrames_13621[i_13616].Field1 = it_13615.line;
					i_13616 += 1;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_13615 == null))) break L5;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		result_13607[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_13617 == i_13616))) {
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13607[0] = makeNimstrLit("(");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr(((total_13617 - i_13616))+"")); } else { result_13607[0] = cstrToNimstr(((total_13617 - i_13616))+"");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13607[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_13815 = 0;
			var colontmp__13821 = 0;
			colontmp__13821 = (i_13616 - 1);
			var res_13824 = colontmp__13821;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_13824)) break L8;
						j_13815 = res_13824;
						add_11629(result_13607, 0, tempFrames_13621[j_13815].Field0);
						if ((0 < tempFrames_13621[j_13815].Field1)) {
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13607[0] = makeNimstrLit(", line: ");};
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13621[j_13815].Field1)+"")); } else { result_13607[0] = cstrToNimstr((tempFrames_13621[j_13815].Field1)+"");};
						}
						
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13607[0] = makeNimstrLit("\x0A");};
						res_13824 -= 1;
					}
			} while(false);
		} while(false);

	return result_13607[0];

}

function rawWriteStackTrace_13828() {
	var result_13830 = null;

		if (!((framePtr == null))) {
		result_13830 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13604(framePtr)), NTI138);
		}
		else {
			result_13830 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_13830;

}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(rawWriteStackTrace_13828()); } else { buf_13854[0] = rawWriteStackTrace_13828();};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function sysFatal_19452(message_19458) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/system.nim",line:0};
	framePtr = F;
		F.line = 2721;
		var e_19460 = null;
		F.line = 2722;
		e_19460 = {m_type: NTI3482, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2723;
		e_19460.message = nimCopy(null, message_19458, NTI138);
		F.line = 2724;
		raiseException(e_19460, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_19449, p_19449_Idx) {
		if ((p_19449_Idx == 0)) {
		sysFatal_19452(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function raiseIndexError() {
		var e_14494 = null;
		e_14494 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null, up: null};
		e_14494.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14494.parent = null;
		raiseException(e_14494, "IndexError");

	
}

function raiseOverflow() {
		var e_14440 = null;
		e_14440 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null, up: null};
		e_14440.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14440.parent = null;
		raiseException(e_14440, "OverflowError");

	
}

function raiseRangeError() {
		var e_14476 = null;
		e_14476 = {m_type: NTI3458, parent: null, name: null, message: null, trace: null, up: null};
		e_14476.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14476.parent = null;
		raiseException(e_14476, "RangeError");

	
}

function nsuToLowerAsciiChar(c_41785) {
	var result_41786 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet3[c_41785] != undefined)) {
		F.line = 210;
		result_41786 = chckRange(addInt(c_41785, 32), 0, 255);
		}
		else {
			F.line = 212;
			result_41786 = c_41785;
		}
		
	framePtr = F.prev;

	return result_41786;

}

function nsuToLowerChar(c_41941) {
	var result_41942 = 0;

	var F={procname:"strutils.toLower",prev:framePtr,filename:"lib/pure/strutils.nim",line:0};
	framePtr = F;
		F.line = 335;
		result_41942 = nsuToLowerAsciiChar(c_41941);
	framePtr = F.prev;

	return result_41942;

}

function getTimezone_66203() {
	var result_68130 = 0;

	var F={procname:"times.getTimezone",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 1384;
		result_68130 = mulInt(new Date().getTimezoneOffset(), 60);
	framePtr = F.prev;

	return result_68130;

}

function raiseDivByZero() {
		var e_14458 = null;
		e_14458 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null, up: null};
		e_14458.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14458.parent = null;
		raiseException(e_14458, "DivByZeroError");

	
}

function isLeapYear_66250(year_66252) {
	var result_66253 = false;

	var F={procname:"times.isLeapYear",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((modInt(year_66252, 400) == 0)) {
		F.line = 341;
		result_66253 = true;
		break BeforeRet;
		}
		else {
		if ((modInt(year_66252, 100) == 0)) {
		F.line = 343;
		result_66253 = false;
		break BeforeRet;
		}
		else {
		if ((modInt(year_66252, 4) == 0)) {
		F.line = 345;
		result_66253 = true;
		break BeforeRet;
		}
		else {
			F.line = 347;
			result_66253 = false;
			break BeforeRet;
		}
		}}
	} while (false);
	framePtr = F.prev;

	return result_66253;

}

function getDaysInMonth_66259(month_66261, year_66262) {
			var Tmp1;

	var result_66263 = 0;

	var F={procname:"times.getDaysInMonth",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 353;
		switch (month_66261) {
		case 1:
			F.line = 354;
			if (isLeapYear_66250(year_66262)) {
			Tmp1 = 29;
			}
			else {
			Tmp1 = 28;
			}
			
			result_66263 = Tmp1;
			break;
		case 3:
		case 5:
		case 8:
		case 10:
			F.line = 355;
			result_66263 = 30;
			break;
		default: 
			F.line = 356;
			result_66263 = 31;
			break;
		}
	framePtr = F.prev;

	return result_66263;

}

function getLocalTime_65644(t_65646) {
	var result_68022 = {m_type: NTI65602, second: 0, minute: 0, hour: 0, monthday: 0, month: 0, year: 0, weekday: 0, yearday: 0, isDST: false, timezone: 0};

	var F={procname:"times.getLocalTime",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 1340;
		result_68022.second = chckRange(t_65646.getSeconds(), 0, 61);
		F.line = 1341;
		result_68022.minute = chckRange(t_65646.getMinutes(), 0, 59);
		F.line = 1342;
		result_68022.hour = chckRange(t_65646.getHours(), 0, 23);
		F.line = 1343;
		result_68022.monthday = chckRange(t_65646.getDate(), 1, 31);
		F.line = 1344;
		result_68022.month = chckRange(t_65646.getMonth(), 0, 11);
		F.line = 1345;
		result_68022.year = t_65646.getFullYear();
		F.line = 1346;
		result_68022.weekday = weekDays_68014[chckIndx(t_65646.getDay(), 0, weekDays_68014.length-1)-0];
		F.line = 1347;
		result_68022.timezone = getTimezone_66203();
		F.line = 1349;
		result_68022.yearday = subInt(result_68022.monthday, 1);
		L1: do {
			F.line = 1350;
			var month_68053 = 0;
			F.line = 3831;
			var colontmp__68064 = 0;
			F.line = 1350;
			colontmp__68064 = result_68022.month;
			F.line = 3832;
			var i_68067 = 0;
			L2: do {
				F.line = 3833;
					L3: while (true) {
					if (!(i_68067 < colontmp__68064)) break L3;
						F.line = 3834;
						month_68053 = i_68067;
						F.line = 1351;
						result_68022.yearday = addInt(result_68022.yearday, chckRange(getDaysInMonth_66259(month_68053, result_68022.year), 0, 365));
						F.line = 3835;
						i_68067 = addInt(i_68067, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_68022;

}

function nsuIntToStr(x_43521, minchars_43522) {
	var result_43523 = null;

		result_43523 = nimCopy(null, cstrToNimstr((Math.abs(x_43521))+""), NTI138);
		L1: do {
			var i_43533 = 0;
			var colontmp__43535 = 0;
			colontmp__43535 = (minchars_43522 - (result_43523 != null ? result_43523.length-1 : 0));
			var res_43538 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_43538 <= colontmp__43535)) break L3;
						i_43533 = res_43538;
						result_43523 = nimCopy(null, [48].concat(result_43523), NTI138);
						res_43538 += 1;
					}
			} while(false);
		} while(false);
		if ((x_43521 < 0)) {
		result_43523 = nimCopy(null, [45].concat(result_43523), NTI138);
		}
		

	return result_43523;

}

function ntgetDateStr() {
	var result_66482 = null;

	var F={procname:"times.getDateStr",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 430;
		var ti_66483 = getLocalTime_65644(getTime_65642());
		F.line = 431;
		result_66482 = nimCopy(null, (cstrToNimstr((ti_66483.year)+"").slice(0,-1)).concat([45],nsuIntToStr(addInt(ti_66483.month, 1), 2).slice(0,-1),[45],nsuIntToStr(ti_66483.monthday, 2)), NTI138);
	framePtr = F.prev;

	return result_66482;

}

function ntgetClockStr() {
	var result_66494 = null;

	var F={procname:"times.getClockStr",prev:framePtr,filename:"lib/pure/times.nim",line:0};
	framePtr = F;
		F.line = 436;
		var ti_66495 = getLocalTime_65644(getTime_65642());
		F.line = 437;
		result_66494 = nimCopy(null, (nsuIntToStr(ti_66495.hour, 2).slice(0,-1)).concat([58],nsuIntToStr(ti_66495.minute, 2).slice(0,-1),[58],nsuIntToStr(ti_66495.second, 2)), NTI138);
	framePtr = F.prev;

	return result_66494;

}

function substituteLog_69412(frmt_69414, level_69415, args_69417) {
	var result_69418 = null;

	var F={procname:"logging.substituteLog",prev:framePtr,filename:"lib/pure/logging.nim",line:0};
	framePtr = F;
		F.line = 110;
		var msgLen_69419 = 0;
		L1: do {
			F.line = 111;
			var arg_69444 = null;
			F.line = 2078;
			var i_70012 = 0;
			L2: do {
				F.line = 2079;
					L3: while (true) {
					if (!(i_70012 < (args_69417 != null ? args_69417.length : 0))) break L3;
						F.line = 2080;
						arg_69444 = args_69417[chckIndx(i_70012, 0, args_69417.length-1)-0];
						F.line = 112;
						msgLen_69419 = addInt(msgLen_69419, (arg_69444 != null ? arg_69444.length-1 : 0));
						F.line = 2081;
						i_70012 = addInt(i_70012, 1);
					}
			} while(false);
		} while(false);
		F.line = 113;
		result_69418 = nimCopy(null, mnewString(0), NTI138);
		F.line = 114;
		var i_69455 = 0;
		L4: do {
			F.line = 115;
				L5: while (true) {
				if (!(i_69455 < (frmt_69414 != null ? frmt_69414.length-1 : 0))) break L5;
					if (!((frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0] == 36))) {
					F.line = 117;
					if (result_69418 != null) { addChar(result_69418, frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0]); } else { result_69418 = [frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0], 0]; };
					F.line = 118;
					i_69455 = addInt(i_69455, 1);
					}
					else {
						F.line = 120;
						i_69455 = addInt(i_69455, 1);
						F.line = 121;
						var v_69474 = makeNimstrLit("");
						F.line = 122;
						var app_69601 = makeNimstrLit("");
						L6: do {
							F.line = 123;
								L7: while (true) {
								if (!(ConstSet2[frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0]] != undefined)) break L7;
									F.line = 124;
									if (v_69474 != null) { addChar(v_69474, nsuToLowerChar(frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0])); } else { v_69474 = [nsuToLowerChar(frmt_69414[chckIndx(i_69455, 0, frmt_69414.length-1)-0]), 0]; };
									F.line = 125;
									i_69455 = addInt(i_69455, 1);
								}
						} while(false);
						F.line = 126;
						switch (toJSStr(v_69474)) {
						case "date":
							F.line = 127;
							if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat(ntgetDateStr()); } else { result_69418 = ntgetDateStr();};
							break;
						case "time":
							F.line = 128;
							if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat(ntgetClockStr()); } else { result_69418 = ntgetClockStr();};
							break;
						case "datetime":
							F.line = 129;
							if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat((ntgetDateStr().slice(0,-1)).concat(makeNimstrLit("T").slice(0,-1),ntgetClockStr())); } else { result_69418 = (ntgetDateStr().slice(0,-1)).concat(makeNimstrLit("T").slice(0,-1),ntgetClockStr());};
							break;
						case "app":
							F.line = 130;
							if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat(app_69601); } else { result_69418 = app_69601;};
							break;
						case "appdir":
							break;
						case "appname":
							break;
						case "levelid":
							F.line = 135;
							if (result_69418 != null) { addChar(result_69418, LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0][chckIndx(0, 0, LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0].length-1)-0]); } else { result_69418 = [LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0][chckIndx(0, 0, LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0].length-1)-0], 0]; };
							break;
						case "levelname":
							F.line = 136;
							if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat(LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0]); } else { result_69418 = LevelNames_69211[chckIndx(level_69415, 0, LevelNames_69211.length-1)-0];};
							break;
						default: 
							break;
						}
					}
					
				}
		} while(false);
		L8: do {
			F.line = 138;
			var arg_70008 = null;
			F.line = 2078;
			var i_70018 = 0;
			L9: do {
				F.line = 2079;
					L10: while (true) {
					if (!(i_70018 < (args_69417 != null ? args_69417.length : 0))) break L10;
						F.line = 2080;
						arg_70008 = args_69417[chckIndx(i_70018, 0, args_69417.length-1)-0];
						F.line = 139;
						if (result_69418 != null) { result_69418 = (result_69418.slice(0, -1)).concat(arg_70008); } else { result_69418 = arg_70008;};
						F.line = 2081;
						i_70018 = addInt(i_70018, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_69418;

}

function log_70028(logger_70030, level_70031, args_70033) {
			var Tmp1;

	var F={procname:"logging.log",prev:framePtr,filename:"lib/pure/logging.nim",line:0};
	framePtr = F;
			if (!(level_69407[0] <= level_70031)) Tmp1 = false; else {				Tmp1 = (logger_70030.levelThreshold <= level_70031);			}		if (Tmp1) {
		F.line = 151;
		var ln_70050 = substituteLog_69412(logger_70030.fmtStr, level_70031, args_70033);
		F.line = 153;
		var cln_70201 = toJSStr(ln_70050);
		F.line = 154;
		console.log(cln_70201);
		}
		
	framePtr = F.prev;

	
}

function log_70019(logger_70021, level_70022, args_70024) {
	var F={procname:"logging.log",prev:framePtr,filename:"lib/pure/logging.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function log_70026(logger_70021, level_70022, args_70024) {
	var F={procname:"logging.log",prev:framePtr,filename:"lib/pure/logging.nim",line:0};
	framePtr = F;
		F.line = -1;
		chckNilDisp(logger_70021);
		if (isObj(logger_70021.m_type, NTI69227)) {
		F.line = 141;
		log_70028(logger_70021, level_70022, args_70024);
		}
		else {
		if (isObj(logger_70021.m_type, NTI69223)) {
		F.line = 141;
		log_70019(logger_70021, level_70022, args_70024);
		}
		}
	framePtr = F.prev;

	
}
